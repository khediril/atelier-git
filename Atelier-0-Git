# üõ†Ô∏è Atelier Guid√© : Git & GitHub pour la Synchronisation Personnelle

## Introduction : Le Pourquoi (5 min)

L'objectif est d'utiliser **GitHub** comme un "coffre-fort" intelligent et un point de synchronisation central pour votre projet.

  * **Git :** Le logiciel de contr√¥le de version qui g√®re l'historique de votre code **localement** (sur votre PC).
  * **GitHub :** La plateforme sur le cloud qui h√©berge votre code **√† distance** et permet la synchronisation.

-----

## √âTAPE 0 : Pr√©paration (15 min)

### 1\. Configuration Initiale

**Question :** Comment Git sait-il qui a fait les changements ?

**Action :** Ouvrez votre terminal (ou Git Bash) et configurez votre identit√© (√† faire une seule fois par ordinateur) :

```bash
git config --global user.name "Votre Pr√©nom et Nom"
git config --global user.email "votre.email@fac.com"
```

### 2\. Cr√©ation du D√©p√¥t Distant (sur GitHub)

**Question :** O√π votre travail sera-t-il stock√© en ligne ?

**Action :** Allez sur le site de GitHub :

1.  Cr√©ez un **Nouveau Repository** (D√©p√¥t).
2.  Choisissez un nom pertinent (ex: `projet-semestre-1`).
3.  Laissez les options **README** et **.gitignore** **d√©coch√©es**.
4.  Cliquez sur **Create Repository**.
5.  **Gardez l'URL HTTPS du d√©p√¥t** ouverte (vous en aurez besoin).

-----

## PARTIE 1 : D√©marrage au Labo et Premier Envoi (20 min)

### 1\. Initialisation du Projet Local

**Question :** Comment transformer votre dossier de travail en d√©p√¥t Git ?

**Action :** Dans votre terminal, cr√©ez le dossier du projet et activez Git √† l'int√©rieur :

```bash
# Cr√©e le dossier et y navigue
mkdir mon-projet-fac
cd mon-projet-fac

# Active le suivi Git local
git init
```

### 2\. La Premi√®re Sauvegarde

**Question :** Comment enregistrer un premier instantan√© du travail ?

**Action :**

1.  Cr√©ez votre premier fichier de code (ex: `index.html` ou `main.py`).
2.  Ajoutez tous les fichiers pour la pr√©paration :
    ```bash
    git add .
    ```
3.  Enregistrez l'instantan√© (**commit**) avec un message clair :
    ```bash
    git commit -m "Initial commit du projet"
    ```

### 3\. Connexion et Envoi (Push)

**Question :** Comment envoyer cette premi√®re sauvegarde sur GitHub ?

**Action :**

1.  Liez votre d√©p√¥t local √† l'adresse distante (`origin` √©tant le nom standard) :
    ```bash
    git remote add origin [COLLER L'URL HTTPS DE GITHUB ICI]
    ```
2.  Envoyez l'historique sur la branche principale (`main`) :
    ```bash
    git push -u origin main
    ```
    *üéâ **Succ√®s \!** Votre projet est en ligne.*

-----

## PARTIE 2 : Reprendre le Travail (√Ä la Maison ou Ailleurs) (15 min)

### Sc√©nario A : Premi√®re fois sur une nouvelle machine

**Question :** Comment r√©cup√©rer le projet complet pour la premi√®re fois √† la maison ?

**Action :** Sur le nouvel ordinateur, t√©l√©chargez le projet en utilisant la commande **`clone`** :

```bash
# T√©l√©charge et cr√©e le dossier 'mon-projet-fac'
git clone [COLLER L'URL HTTPS DE GITHUB ICI]

# Entrez dans le nouveau dossier
cd mon-projet-fac
```

### Sc√©nario B : La Routine Quotidienne (Synchronisation)

**Cette routine doit √™tre faite √† chaque fois que vous changez de lieu de travail.**

#### √âtape A : R√©cup√©rer le Dernier Travail

**Question :** Comment s'assurer d'avoir la version la plus r√©cente avant de commencer ?

**Action :** **Avant de toucher au code**, tirez les changements de GitHub :

```bash
git pull
```

#### √âtape B : Travailler, Sauvegarder, Renvoyer

**Question :** Apr√®s avoir fait des modifications, comment les mettre √† jour en ligne ?

**Action :** R√©p√©tez ce cycle :

1.  Travaillez sur vos fichiers (√©diteur).
2.  Pr√©parez les changements :
    ```bash
    git add .
    ```
3.  Sauvegardez l'instantan√© local :
    ```bash
    git commit -m "Ajout de la fonction de calcul de moyenne"
    ```
4.  Renvoyez le tout sur GitHub :
    ```bash
    git push
    ```
    *‚úÖ Le cycle est complet. Le travail est mis √† jour pour votre prochaine session.*

-----

## R√âCAPITULATIF : Les 5 Commandes Vitales

M√©morisez ce flux simple pour votre synchronisation personnelle :

| Situation | Commande √† utiliser | Objectif |
| :--- | :--- | :--- |
| **D√©marrer un nouveau d√©p√¥t local.** | `git init` | Cr√©er la base de suivi Git. |
| **Passer √† une nouvelle machine.** | `git clone [URL]` | T√©l√©charger le projet entier de GitHub. |
| **Avant de commencer √† coder.** | **`git pull`** | R√©cup√©rer les derni√®res modifications faites ailleurs. |
| **Pr√©parer les fichiers modifi√©s.** | `git add .` | Mettre les fichiers dans la zone de pr√©paration. |
| **Enregistrer et partager le travail.** | `git commit -m "Msg"` **puis** `git push` | Sauvegarder localement, puis envoyer sur GitHub. |
